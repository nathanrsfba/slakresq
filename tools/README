Scripts in this folder:

mkbase
    Create the base filesystem for the core bundle. By default, this includes
    just diskset a, plus a few packages out of ap and l, which is the minimum
    required for the Linux Live Kit script to run. To use a different set,
    pass the disksets you want on the command line, or change the option in
    the config file.

    You can configure which extra packages are installed with the SUPPORT_PKGS
    variable. If your core includes both ap and l, you can comment this line
    out.

buildlive
    Creates the SlakResQ tree in target/. This will not re-create target,
    but will instead will update any changed files, and leave anything
    else intact.

    If you give this script the -i option, it will rebuild the initramfs (and
    the rest of the boot directory), without rebuilding the core module.

clean
    Cleans up various build artifacts.

    Takes a series of options depending on what you want to clean:

    -m: Delete temporary folders that are only used during build processes.
        (diff, instenv, merged)
    -t: Delete the target folder (target)
    -T: Delete bundle trees (everything in trees, except 99-patches)
    -u: Delete updates folder (updates)
    -i: Delete install disksets (install)
    -a: Delete all of the above

extdiskset
    Extracts a set of disksets, and saves the resulting filesystem tree into
    trees/. This uses overlayfs to mount a filesystem overtop base/, thus
    saving only the files changed by installing the given disksets.

    The first parameter should be the name of the resulting bundle (minus file
    extension), the rest should be a list of disksets to install. Ex:

        tools/extdiskset 20-dev d e tcl

    If the config file defines the disksets for the bundle, they can be left
    off:

        tools/extdiskset 20-dev

fetchinstall
    Downloads all installer disksets into install/ from the mirror specified
    in the config. Note that this does not attempt to download any diskset that
    already appears to exist, so as to not interfere with any potentially
    updated packages

fetchupdates
    Downloads updates from the configured mirror site. Unlike fetchinstall,
    this *does* attempt to update an existing updates directory

finddupes
    This displays a list of all files that appear in multiple bundle trees.
    You may wish to run this before squashing the bundles, and examining the
    resulting list to see if any conflicts need to be addressed.

mkall
    Goes through and runs all the scripts in the proper order to make a new
    SlakResQ build. This will attempt to run incrementally. If a previous
    build was interrupted, it will continue where it left off. If things were
    added or changed, it will only rebuild the changes. This process is not
    foolproof however.

    Things that mkall tests for:

    * Downloads disksets that don't exist, if enabled (fetchinstall)
    * Downloads current updates, if enabled (fetchupdates)
    * Applies any new updates, if enabled (updatepkgs)
    * If any of the core disksets have changed, rebuild base/ (mkbase)
    * If any of base/ has changed, recreate the core module (buildlive)
    * If any boot-related files in live/ have changed, recreate the boot files
      (buildlive -i)
    * Checks each bundle to see if its disksets have changed, and rebuild them
      if so (extdiskset && squashbundle)
    * Checks any bundle that isn't created from disksets (like 99-patches) for
      changes, and recompresses them (squashbundle)

prepbundles
    Runs extdiskset for all bundles defined in config

updatepkgs
    This will update the packages in the install/ directory with packages
    found in the updates/ directory. You can find updates in the
    slackware64/patches/packages directory in the Slackware mirrors.

    The following command line arguments are supported:

    -v: Verbose. Displays what packages are being updated, the old and new
    versions, and what packages are already up to date, or weren't found in
    the install tree (normal if you don't have all the disksets). By default,
    only outputs the names of packages that are updated.
    -q: Quiet. Don't display anything at all
    -t: Test. Don't make any changes, just display what would be updated. Note
    that specifying this with -q would just be silly.
    -u: Specify the path to package updates, default ./updates
    -i: Specify the path to disksets to update, default ./install

squashbundle
    Squshes a bundle (or set of bundles) in trees into a bundle file.
    Parameters are the name(s) of the bundle(s) to squash (minus file
    extension). Ex:

        tools/squashbundle 10-net 20-dev 90-x11

    By default, creates bundles out of all folders in trees/

