#!/bin/sh

CFG=${CFG:-/run/initramfs/lib/config}
BOOT=${BOOT:-/run/initramfs/memory/data}

. "$CFG" || exit 1

# Default kernel location
KPATH=${KPATH:-/boot/vmlinuz}

while getopts "k:V:c:n:" arg; do
    case $arg in
        k) KPATH="$OPTARG" ;;
        V) KVER="$OPTARG" ;;
        c) KCMD="$OPTARG" ;;
        n) KNAME="$OPTARG" ;;
        ?)
            echo "Usage:"
            echo "$0 [-k kernel] [-V kver] [-c cmdline] [-n name]"
            echo
            echo "kernel: Path to kernel. Default: $KPATH"
            echo "kver: Version of kernel, in case autodetect fails"
            echo "cmdline: Kernel command line: Default:" \
                 "take from /proc/cmdline"
            echo "name: Name of subfolder and bootmenu item for new kernel."
            echo "  Default: Replace original and create fallback entry"
            exit
            ;;
    esac
done

# echo "Path: $KPATH"; echo "Version: $KVER"; echo "Cme: $KCMD"; echo "Name: $KNAME"

echo "Setting up..."

# Sanity check
if [ ! -e $KPATH ]; then
    echo "No such file: $KPATH"
    exit 1
fi

# Check what version the new kernel is.
if [ ! $KVER ]; then
    kinfo="`file -L "$KPATH"`" || return 1
    KVER="`echo $kinfo | sed 's/ /\n/g' | 
        grep -A 1 version | tail -1`" || return 1

    if [ "$KVER" = "" ]; then
        echo "Couldn't determine kernel version"
        exit 1
    fi
fi

# Make sure modules exist
if [ ! -d "/lib/modules/$KVER" ]; then
    echo "Couldn't find modules for kernel version $KVER"
    exit 1
fi

# Gather up modules from new kernel required for boot.

irtmp="`mktemp -d`" || exit 1
INITRAMFS="$irtmp/root"
mkdir "$INITRAMFS"
KERNEL=$KVER
echo "Creating temporary directory $irtmp"

echo "Copying modules for new kernel..."

# Following is copied and modified from Linux-Live initramfs create script
copy_including_deps()
{
   # if source doesn't exist or target exists, do nothing
   if [ ! -e "$1" -o -e "$INITRAMFS"/"$1" ]; then
      return
   fi

   cp -R --parents "$1" "$INITRAMFS"
   if [ -L "$1" ]; then
      DIR="$(dirname "$1")"
      LNK="$(readlink "$1")"
      copy_including_deps "$(cd "$DIR"; realpath -s "$LNK")"
   fi

   ldd "$1" 2>/dev/null | sed -r "s/.*=>|[(].*//g" | sed -r "s/^\\s+|\\s+\$//" \
     | while read LIB; do
        copy_including_deps "$LIB"
     done

   for MOD in $(find "$1" -type f | grep .ko); do
      for DEP in $(cat /$LMK/modules.dep | fgrep /$(basename $MOD):); do
         copy_including_deps "/$LMK/$DEP"
      done
   done

   shift
   if [ "$1" != "" ]; then
       copy_including_deps "$@"
   fi
}

# rm -Rf $INITRAMFS
# mkdir -p $INITRAMFS/{bin,dev,etc,lib,lib64,mnt,proc,root,run,sys,tmp,usr,var/log}
# ln -s bin $INITRAMFS/sbin

# cp static/busybox $INITRAMFS/bin
# cp static/eject $INITRAMFS/bin
# cp static/mount.dynfilefs $INITRAMFS/bin/@mount.dynfilefs
# cp static/mount.httpfs2 $INITRAMFS/bin/@mount.httpfs2
# cp static/blkid $INITRAMFS/bin
# chmod a+x $INITRAMFS/bin/*
# mkdir -p $INITRAMFS/etc/modprobe.d
# echo "options loop max_loop=0" >$INITRAMFS/etc/modprobe.d/local-loop.conf

# $INITRAMFS/bin/busybox | grep , | grep -v Copyright | tr "," " " | while read LINE; do
   # for TOOL in $LINE; do
      # if [ ! -e $INITRAMFS/bin/$TOOL ]; then
         # ln -s busybox $INITRAMFS/bin/$TOOL
      # fi
   # done
# done
# rm -f $INITRAMFS/{s,}bin/init

# mknod $INITRAMFS/dev/console c 5 1
# mknod $INITRAMFS/dev/null c 1 3
# mknod $INITRAMFS/dev/ram0 b 1 0
# mknod $INITRAMFS/dev/tty1 c 4 1
# mknod $INITRAMFS/dev/tty2 c 4 2
# mknod $INITRAMFS/dev/tty3 c 4 3
# mknod $INITRAMFS/dev/tty4 c 4 4

#copy_including_deps /usr/bin/strace
#copy_including_deps /usr/bin/lsof

copy_including_deps /$LMK/kernel/fs/aufs
copy_including_deps /$LMK/kernel/fs/overlayfs
copy_including_deps /$LMK/kernel/fs/ext2
copy_including_deps /$LMK/kernel/fs/ext3
copy_including_deps /$LMK/kernel/fs/ext4
copy_including_deps /$LMK/kernel/fs/fat
copy_including_deps /$LMK/kernel/fs/nls
copy_including_deps /$LMK/kernel/fs/fuse
copy_including_deps /$LMK/kernel/fs/isofs
copy_including_deps /$LMK/kernel/fs/ntfs
copy_including_deps /$LMK/kernel/fs/ntfs3
copy_including_deps /$LMK/kernel/fs/reiserfs
copy_including_deps /$LMK/kernel/fs/squashfs

# crc32c is needed for ext4, but I don't know which one, add them all, they are small
find /$LMK/kernel/ | grep crc32c | while read LINE; do
   copy_including_deps $LINE
done

copy_including_deps /$LMK/kernel/drivers/staging/zsmalloc # needed by zram
copy_including_deps /$LMK/kernel/drivers/block/zram
copy_including_deps /$LMK/kernel/drivers/block/loop.*

# usb drivers
copy_including_deps /$LMK/kernel/drivers/usb/storage
copy_including_deps /$LMK/kernel/drivers/usb/host
copy_including_deps /$LMK/kernel/drivers/usb/common
copy_including_deps /$LMK/kernel/drivers/usb/core
copy_including_deps /$LMK/kernel/drivers/hid/usbhid
copy_including_deps /$LMK/kernel/drivers/hid/hid.*
copy_including_deps /$LMK/kernel/drivers/hid/uhid.*
copy_including_deps /$LMK/kernel/drivers/hid/hid-generic.*

# disk and cdrom drivers
copy_including_deps /$LMK/kernel/drivers/cdrom
copy_including_deps /$LMK/kernel/drivers/scsi/sr_mod.*
copy_including_deps /$LMK/kernel/drivers/scsi/sd_mod.*
copy_including_deps /$LMK/kernel/drivers/scsi/scsi_mod.*
copy_including_deps /$LMK/kernel/drivers/scsi/sg.*
copy_including_deps /$LMK/kernel/drivers/ata
copy_including_deps /$LMK/kernel/drivers/nvme
copy_including_deps /$LMK/kernel/drivers/mmc

# network support drivers
if [ "$NETWORK" = "true" ]; then
   # add all known ethernet drivers
   copy_including_deps /$LMK/kernel/drivers/net/ethernet
fi

# copy all custom-built modules
copy_including_deps /$LMK/updates

copy_including_deps /$LMK/modules.*

# copy fsck tools if enabled
# if [ "$BOOTFSCK" = "true" ]; then
    # for tool in $FSCKTOOLS; do
        # copy_including_deps /sbin/$tool
    # done

    # fsck.ext? are actually one-line shell scripts... that use
    # /bin/bash. WHY??
#     for tool in "$INITRAMFS"/sbin/fsck.ext?; do
#         if [ -e "$tool" ]; then
#             sed "s/#\!\/bin\/bash/#\!\/bin\/sh/" < "$tool" > "$tool.fix"
#             mv "$tool.fix" "$tool"
#             chmod a+x "$tool"
#         fi
#     done
# fi

# copy mksquashfs if extendable changes enabled
# if [ "$SNAPSHOTS" = "true" ]; then
#     for tool in $FSCKTOOLS; do
#         copy_including_deps /usr/bin/mksquashfs
#     done
#     # For some reason, mksquashfs needs this even though it's not
#     # actually linked according to ldd!
#     copy_including_deps /usr/lib*/libgcc_s.so.1
# fi

find $INITRAMFS -name "*.ko.gz" -exec gunzip {} \;

# trim modules.order file. Perhaps we could remove it entirely
MODULEORDER="$(cd "$INITRAMFS/$LMK/"; find -name "*.ko" | sed -r "s:^./::g" | tr "\n" "|" | sed -r "s:[.]:.:g")"
cat $INITRAMFS/$LMK/modules.order | sed -r "s/.ko.gz\$/.ko/" | grep -E "$MODULEORDER"/foo/bar > $INITRAMFS/$LMK/_
mv $INITRAMFS/$LMK/_ $INITRAMFS/$LMK/modules.order

depmod -b $INITRAMFS $KERNEL

# echo "root::0:0::/root:/bin/bash" >$INITRAMFS/etc/passwd
# touch $INITRAMFS/etc/{m,fs}tab

# cp init $INITRAMFS
# chmod a+x $INITRAMFS/init
# cp shutdown $INITRAMFS
# chmod a+x $INITRAMFS/shutdown
# ln -s ../init $INITRAMFS/bin/init
# cp ../livekitlib $INITRAMFS/lib/
# cp ../config $INITRAMFS/lib/

# cd $INITRAMFS
# find . -print | cpio -o -H newc 2>/dev/null | xz -T0 -f --extreme --check=crc32 >$INITRAMFS.img
# echo $INITRAMFS.img
# 
# cd ..
# rm -Rf $INITRAMFS

echo "Decompressing old image..."
unxz < "$BOOT/$LIVEKITNAME/boot/initrfs.img" > "$irtmp/initrfs.img" || exit 1

echo "Adding files to new image..."
img="`realpath "$irtmp/initrfs.img"`"
(cd "$irtmp/root" ; find . -print | cpio -oA -H newc -F "$img") || exit 1

echo "Recompressing image..."
xz -T0 -f --extreme --check=crc32 "$irtmp/initrfs.img"

#------------------------------------------------------------
# Add bootmenu entry

# Get command line
if [ ! "$KCMD" ]; then
    KCMD="`cat /proc/cmdline`"
fi

# Add bootmenu entry
if [ $KNAME ]; then
    name="$KNAME"
    title="Kernel $KVER"
else
    name="fallback"
    title="Fallback kernel"
fi

# Strip BOOT_IMAGE parameter and point to new initrd
KCMD="`echo "$KCMD" | 
    sed "s/BOOT_IMAGE=[[:graph:]]*[[:space:]]\\{0,1\\}//" |
    sed "s/initrd=[[:graph:]]*/initrd=\\/$LIVEKITNAME\\/boot\\/$name\\/initrfs.img/"`"

for f in "$BOOT/$LIVEKITNAME/boot/syslinux.cfg" \
    "$BOOT/EFI/Boot/syslinux.cfg" ; do
    if ! grep -q "$name" "$f"; then
        echo "Updating $f..."
        tmp="`mktemp`"
        (
        echo ""
        echo "LABEL $name"
        echo "MENU LABEL $title"
        echo "KERNEL /$LIVEKITNAME/boot/$name/vmlinuz"
        echo "APPEND $KCMD"
        ) > "$tmp"
        cat "$tmp" >> "$f" || exit 1
        rm -f "$tmp"
    fi
done

echo "Copying kernel and initramfs to boot image..."
if [ ! "$KNAME" ]; then
    # Copy a fallback kernel and install the new one
    mkdir -p "$BOOT/$LIVEKITNAME/boot/fallback" || exit 1
    cp "$BOOT/$LIVEKITNAME/boot/vmlinuz" \
        "$BOOT/$LIVEKITNAME/boot/fallback/vmlinuz" || exit 1
    cp "$BOOT/$LIVEKITNAME/boot/initrfs.img" \
        "$BOOT/$LIVEKITNAME/boot/fallback/initrfs.img" || exit 1
    cp "$KPATH" "$BOOT/$LIVEKITNAME/boot/vmlinuz" || exit 1
    cp "$irtmp/initrfs.img.xz" "$BOOT/$LIVEKITNAME/boot/initrfs.img" || exit 1
else
    # Copy kernel to the given name
    mkdir -p "$BOOT/$LIVEKITNAME/boot/$KNAME" || exit 1
    cp "$KPATH" "$BOOT/$LIVEKITNAME/boot/$KNAME/vmlinuz" || exit 1
    cp "$irtmp/initrfs.img.xz" "$BOOT/$LIVEKITNAME/boot/$KNAME/initrfs.img" || exit 1
fi

echo Done.

rm -rf "$irtmp"

