#!/bin/sh

TMP=''

while getopts "t:f:qcsS?" arg; do
    case $arg in
        t) TMP="$OPTARG" ;;
        c) CLEANUP=1 ;;
        s) SAVE=1 ;;
        S) SAVEFAIL=1 ;;
        q) QUIET=1 ;;
        f) FULLROOT="$OPTARG" ;;
        ?)
            echo "Usage:"
            echo "  $0 [-cdsSq] [-t tmp] [-f fullroot] [cmd [param...]]"
            echo
            echo "-c       Clean up the given temporary directory"
            echo "-s       Save the temporary files and exit after running cmd"
            echo "-S       Save the temporary files if failure occures"
            echo "-q       Quiet"
            echo
            echo "tmp      Location of temporary workspace"
            echo "cmd      Command to run in temporary overlay"
            echo "fullroot Mount readonly copy of root in directory in workspace"
            echo "param    Parameters for command"
            exit
            ;;
    esac
done

shift $((OPTIND - 1))

# Display to stderr, unless quiet
print() {
    if [ $QUIET ]; then
        return
    fi
    echo "$@" 1>&2
}

setup() {
    if [ "$TMP" = "" ]; then
        TMP=`mktemp -t -d tmproot.XXXXXXXX`
    else
        if [ ! -e "$TMP" ]; then
            mkdir "$TMP" || exit 1
        elif [ ! -d "$TMP" ]; then
            echo "$TMP must be a directory"
            exit 1
        elif [ "`ls -A "$TMP"`" != "" ]; then
            echo "$TMP must be empty"
            exit 1
        fi
    fi

    fs=`df --output=fstype "$TMP" | tail -1`
    if [ "$fs" = "overlay" ]; then
        print "The given temporary directory is on an overlayfs filesystem."
        print "overlayfs can't overlay over itself, so we're going to mount"
        print "a ramdrive and use that instead."
        mount -t tmpfs tmpfs "$TMP" || exit 1
    fi

    print "Setting up staging area in $TMP..."
    (
        print "Creating overlay filesystem..."
        mkdir -p "$TMP/diff/data" || exit 1
        mkdir -p "$TMP/diff/work" || exit 1
        mkdir "$TMP/ovl" || exit 1

        mount -t overlay -o \
            "lowerdir=/,upperdir=$TMP/diff/data,workdir=$TMP/diff/work" \
            overlay "$TMP/ovl" || exit 1
        (
            # Exit the subshell if interrupted, so cleanup can occur
            trap "exit 1" INT TERM HUP

	    # Mount the system filesystems in the overlay
            mount -t proc proc "$TMP/ovl/proc" || exit 1
            mount -t sysfs sysfs "$TMP/ovl/sys" || exit 1
            mount -t devtmpfs devtmpfs "$TMP/ovl/dev" || exit 1
            mount -t devpts devpts "$TMP/ovl/dev/pts" || exit 1

            if [ $FULLROOT ]; then
                mkdir -p "$TMP/ovl/$FULLROOT" || exit 1
                mount --rbind -o ro / "$TMP/ovl/$FULLROOT" || exit 1
                mount --make-rslave "$TMP/ovl/$FULLROOT" || exit 1
            fi

            if [ "$1" = "" ]; then
                print "Spawning shell in temporary root."
                chroot "$TMP/ovl"
            elif [ $QUIET ]; then
                chroot "$TMP/ovl" "$@" 1>&2 || exit 1
            else
                chroot "$TMP/ovl" "$@" || exit 1
            fi
        ) || FAIL=1

	# We use 'lazy' unmount, since kdevtmpfs sometimes likes to
	# hold on to /dev
        umount -l "$TMP/ovl/dev/pts"
        umount -l "$TMP/ovl/dev"
        umount -l "$TMP/ovl/proc"
        umount -l "$TMP/ovl/sys"

        if [ $FULLROOT ]; then
        # Unmount everything in the root bind
        (
            IFS=$'\n' 
            for dir in `findmnt -rnRo target "$TMP/ovl/$FULLROOT" | tac`; do
                umount "$dir" || umount -l "$dir"
            done
        )
        fi

        # Unmount the overlay, and any possible submounts
        (
            IFS=$'\n' 
            for dir in `findmnt -rnRo target "$TMP/ovl" | tac`; do
                # Blow away any processes trying to use the dir
                fuser -mks "$dir"
                umount "$dir"
            done
        )
        test $FAIL && exit 1
    )
}

cleanup() {
    print "Cleaning up..."
    fs=`df --output=fstype "$TMP" | tail -1`
    if [ $fs = tmpfs ]; then
        umount "$TMP"
    fi
    rm -rf "$TMP"
}

if [ ! $CLEANUP ]; then
    setup "$@"

    if [ $? != 0 -a "$SAVEFAIL" ]; then
        print "Temporary files remain in $TMP"
        exit 1
    fi

    print "Filesystem changes left in $TMP/diff/data"
    if [ $SAVE ]; then
        if [ $QUIET ]; then
            echo "$TMP"
        fi
        exit
    fi

    print "Spawning shell; exit to begin cleanup"
    (cd "$TMP/diff/data"; $SHELL)

    cleanup
else
    # If a parameter was given but no -t option, take it as the
    # temp folder to clean up
    if [ "$1" != "" ]; then
        TMP="$1"
    fi

    if [ "$TMP" = "" ]; then
        echo "Target directory for cleanup must be specified"
        exit 1
    fi
    cleanup
fi

