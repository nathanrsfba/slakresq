This is SlakResQ: A set of scripts for creating a (more or less) full
Slackware bootable USB stick using the Linux Live Kit.

Currently, this only supports booting from a USB stick using an EFI-capable
bios. Bootable CD and syslinux-style booting may be supported in the future.

Some notes:
* All the tools in this kit should be run out of the 'main' SlakResQ directory
  -- that is, the directory this README is found in
* The tools must be run as root. If you're su-ing or sudo-ing from a non-root
  user, you may wish to ensure that /sbin and /usr/sbin are in your path.
* This process requires support for overlayfs in order to build the bundles.

Creating a live system involves the following steps:

If you want to start an automated build process that will download and build
everything, just run tools/mkall. You might want to edit the config file to
control what all this will do.

You can also go through the build one step at a time. You have a bit more
control over the process, and can customize it a little more. That looks
something like the following:

0) First, look at live/config and see if there are any settings you want to
change. These are the settings used by the Linux Live Kit build script, and
not specific to SlakResQ.

1) Next, you will need to populate the install/ directory. This should contain
the disksets you want to include in the final image. This should contain
disksets out of the slackeware/ or slackware64/ directory off the Slackware
installer, such as 'a', 'ap', 'x', etc.

You might also want to download any available security updates (found in the
patches/packages directory in the Slackware mirrors) and place them in
updates/, and run the tools/updatepkgs script. This will update packages in
install/ with packages from updates/.

Finally, you will need to download the Slackware installer ramdisk image and
place it in the main directory. This is typically named initrd.img, and lives
in the isolinux/ directory in the slackware mirrors.

You can also run tools/fetchinstall to download the install files (including
initrd.img), and tools/fetchupdates to download the updates. You may want to
change the Slackware mirror in config to a suitable mirror. Note that these
scripts require lftp.

2) Next, run tools/mkbase. This will 'install' a base Slackware system into the
base/ directory. This runs in a chroot environment running the Slackware
installer ramdisk image, and then runs 'installpkg' on the appropriate
packages, into base/. 

This causes the install scripts to run properly (they'll recognize the
installer enviroment and act as if they're installing to a new system),
prevents the install scripts from hosing the running system (I'm not sure how,
but it did happen at least once), and saves you from having to install
pkgtools on a non-slackware system.

By default, this will install just diskset a, plus a few packages out of ap
and l. This is the minimum required to produce a bootable system, plus
tools and libraries needed by the Linux Live Kit script. You can configure
which extra packages are installed with the SUPPORT_PKGS variable. If your
core includes both ap and l, you can comment this line out.

If you want to make any changes to the system before turning it into a
bootable image, now is the time. Edit the files in base/ as desired before
continuing onto the next step.

3) Next, run tools/buildlive. This will set up the Linux Live Kit in the new
system and run the scripts, and save the results in target/. Once again, this
runs in a chroot jail in the new 'live' system; for the above reasons, and
also because Linux Live Kit is mean to be run on the target live system.

At this point, you will have a live system that can be copied to a USB stick,
and booted on an EFI-capable system.

4) You'll probably want more than just the basic system, so now you can make
'bundles' with additional functionality. A 'bundle' is basically a squashfs
filesystem image, which will be mixed into the root directory when the live
system boots. You can configure bundles in any number of ways, but this is the
default:

Disksets ap, f, n, l, and y goes into the 10-console bundle
Disksets d, e, and tcl go into the 20-dev bundle
Disksets x, xap, and xfce go into the 90-x11 bundle
Diskset kde goes into the 95-kde bundle

If you want the Kernel source, and/or TeX, there's an alternate option in the
config to enable them.

To create a bundle, run tools/extdiskset with the bundle name as the first
parameter, and the desired disksets as the remaining parameters. The commands
to make the above bundles will look something like this:

tools/extdiskset 10-console ap f n l y
tools/extdiskset 20-dev d e tcl
tools/extdiskset 90-x11 x xap xfce
tools/extdiskset 95-kde kde

This will create a directory in trees/ for each bundle. You can modify the
content of these file trees before compressing them into a squashfs image if
you wish.

You can also just run tools/prepbundles, which will setup all the bundles
according to the settings in config.

For reasons previously discussed, this is again run in a chroot jail in the
target live system.

There is also a 99-patches directory as well; this is a bundle that is loaded
after everything else. It contains changes particular to SlakResQ, rather than
modifying the original slackware disksets themselves. You can add your own
changes to this as well if you so desire. You can also create another bundle
in trees/ with your own additions in the same fashion.

5) Finally, you can run tools/squashbundle to compress each folder in trees/
into the appropriate bundle file in target/. You can specify which bundles you
want to compress on the command line, or run it without parameters to compress
all of them.

This will add the bundles to the existing live system in target/, so you can
make changes to a single bundle and re-compress it without having to recreate
the whole system.

## SlakResQ Tweaks ##

The following tweaks are made to the base Slackware install (via the
99-patches bundle):

* Default runlevel is 4, to activate X; if X isn't detected, it will
  automatically change to runlevel 3 during boot
* If root has no password set, the boot scripts will call startx directly to
  log root in to X. If root has a password, an X display manager is started as
  is typical.
* The default xinit session is now a script that attempts to pick an
  appropriate desktop environment, instead of just assuming KDE is installed.

## Directories ##

The following subdirectores may be found in this directory:

base
    The root filesystem for the core bundle
diff
    Place to save changes from the core bundle to make subsequent bundles.
    diff/data contains filesystem changes, diff/work is temporary directory
    for overlayfs
install
    Slackware install disksets. You will need to provide these for whatever
    packages you want in your install
instenv
    The Slackware installer is extracted and run in here
live
    Linux Live kit scripts. Feel free to update this if there's a newer
    version. However, make sure to preserve the following files in the live/
    folder, as they have been edited for SlakResQ:

        config
        bootfiles/bootlogo.png
        bootfiles/syslinux.cfg
        initramfs/shutdown

merged
    Mount point for merged overlayfs filesystem
target
    File tree for final image
tools
    Scripts used to create the image
trees
    Root filesystem updates for each bundle
updates
    Slackware package updates. The tools/updatepkgs script will replace
    packages in the install/ folder with newer versions out of here.




