This is SlakResQ: A set of scripts for creating a (more or less) full
Slackware bootable USB stick using the Linux Live Kit.

Currently, this only supports booting from a USB stick using an EFI-capable
bios. Bootable CD and syslinux-style booting may be supported in the future.

Some notes:
* All the tools in this kit should be run out of the 'main' SlakResQ directory
  -- that is, the directory this README is found in
* The tools must be run as root. If you're su-ing or sudo-ing from a non-root
  user, you may wish to ensure that /sbin and /usr/sbin are in your path.
* This process requires Slackware's pkgtools to be installed. If you're
  running on a Slackware system, obviously this will already be present. If
  not, you'll need to install them manually. In the future, there may be a
  script to take care of this for you.
* This process requires support for overlayfs in order to build the bundles.

Creating a live system involves the following steps:

If you want to start an automated build process that will download and build
everything, just run tools/mkall. You might want to edit the config file to
control what all this will do.

You can also go through the build one step at a time. You have a bit more
control over the process, and can customize it a little more. That looks
something like the following:

0) First, look at live/config and see if there are any settings you want to
change. These are the settings used by the Linux Live Kit build script, and
not specific to SlakResQ.

1) Next, you will need to populate the install/ directory. This should contain
the disksets you want to include in the final image. This should contain
disksets out of the slackeware/ or slackware64/ directory off the Slackware
installer, such as 'a', 'ap', 'x', etc.

You might also want to download any available security updates (found in the
patches/packages directory in the Slackware mirrors) and place them in
updates/, and run the tools/updatepkgs script. This will update packages in
install/ with packages from updates/.

2) Next, run tools/mkbase. This will 'install' a base Slackware system into the
base/ directory. Actually, what is does is just run 'installpkg' on the
appropriate packages, into base/. This step requires pkgtools, naturally; it
is intended to be run on a Slackware system, but installing pkgtools on
another Linux system may work; this is completely untested.

By default, this will install just diskset a, plus a few packages out of ap
and l. This is the minimum required to produce a bootable system, plus
tools and libraries needed by the Linux Live Kit script. You can configure
which extra packages are installed with the SUPPORT_PKGS variable. If your
core includes both ap and l, you can comment this line out.

If you want to make any changes to the system before turning it into a
bootable image, now is the time. Edit the files in base/ as desired before
continuing onto the next step.

3) Next, run tools/buildlive. This will set up the Linux Live Kit in the base
directory, mount some system partitions, call the scripts, and move the
results into the target/ directory. Note that Linux Live Kit is intended to be
run inside a 'running' Linux install; we emulate this by mounting necessary
partitions, and chroot-ing into the base and running the script from there.

At this point, you will have a live system that can be copied to a USB stick,
and booted on an EFI-capable system.

4) You'll probably want more than just the basic system, so now you can make
'bundles' with additional functionality. A 'bundle' is basically a squashfs
filesystem image, which will be mixed into the root directory when the live
system boots. You can configure bundles in any number of ways, but this is the
default:

Disksets ap, n, l, and y goes into the 10-console bundle
Disksets d, e, and tcl go into the 20-dev bundle
Disksets x, xap, and xfce go into the 90-x11 bundle
Diskset kde goes into the 95-kde bundle

To create a bundle, run tools/extdiskset with the bundle name as the first
parameter, and the desired disksets as the remaining parameters. The commands
to make the above bundles will look something like this:

tools/extdiskset 10-console ap n l y
tools/extdiskset 20-dev d e tcl
tools/extdiskset 90-x11 x xap xfce
tools/extdiskset 95-kde kde

This will create a directory in trees/ for each bundle. You can modify the
content of these file trees before compressing them into a squashfs image if
you wish.

You can also just run tools/prepbundles, which will setup the default bundles,
according to the settings in config.

There is also a 99-patches directory as well; this is a bundle that is loaded
after everything else. It contains changes particular to SlakResQ, rather than
modifying the original slackware disksets themselves. You can add your own
changes to this as well if you so desire.

5) Finally, you can run tools/squashbundle to compress each folder in trees/
into the appropriate bundle file in target/. You can specify which bundles you
want to compress on the command line, or run it without parameters to compress
all of them.

This will add the bundles to the existing live system in target/, so you can
make changes to a single bundle and re-compress it without having to recreate
the whole system.


## Directories ##

The following subdirectores may be found in this directory:

base
    The root filesystem for the core bundle
diff
    Place to save changes from the core bundle to make subsequent bundles.
    diff/data contains filesystem changes, diff/work is temporary directory
    for overlayfs
install
    Slackware install disksets. You will need to provide these for whatever
    packages you want in your install
live
    Linux Live kit scripts. Feel free to update this if there's a newer
    version. However, make sure to preserve the following files in the live/
    folder, as they have been edited for SlakResQ:

        config
        bootfiles/bootlogo.png
        bootfiles/syslinux.cfg
merged
    Mount point for merged overlayfs filesystem
target
    File tree for final image
tools
    Scripts used to create the image
trees
    Root filesystem updates for each bundle
updates
    Slackware package updates. The tools/updatepkgs script will replace
    packages in the install/ folder with newer versions out of here.




